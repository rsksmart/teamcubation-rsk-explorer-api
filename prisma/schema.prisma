generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = ""
}

model abi {
  id               Int         @id @default(autoincrement())
  anonymous        Boolean?
  name             String?     @db.VarChar
  type             String?     @db.VarChar
  abi_input        abi_input[]
  event            event[]
  log_log_abiToabi log[]       @relation("log_abiToabi")
}

model abi_input {
  abiId Int     @map("abi_id")
  name  String  @db.VarChar
  type  String? @db.VarChar
  abi   abi     @relation(fields: [abiId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_abi_input_abi_id")
  input input?  @relation(fields: [name, type], references: [name, type], onDelete: NoAction, onUpdate: NoAction, map: "fk_abi_input_name_type")

  @@id([abiId, name], map: "pk_abi_input")
}

model action {
  id                   Int                    @id @default(autoincrement())
  from                 String                 @db.VarChar(42)
  to                   String                 @db.VarChar(42)
  gas                  String                 @db.VarChar
  value                String                 @db.VarChar
  internal_transaction internal_transaction[]
}

model address {
  address                                            String             @id @db.VarChar(42)
  block                                              Int
  lastBlockMined                                     Int?               @map("last_block_mined")
  balance                                            String             @db.VarChar
  isNative                                           Boolean            @map("is_native")
  type                                               Int
  block_address_blockToblock                         block              @relation("address_blockToblock", fields: [block], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_address_block")
  block_address_last_block_minedToblock              block?             @relation("address_last_block_minedToblock", fields: [lastBlockMined], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_address_last_block_mined")
  address_in_event_address_in_event_addressToaddress address_in_event[] @relation("address_in_event_addressToaddress")
  balance_balance_addressToaddress                   balance[]          @relation("balance_addressToaddress")
  contract_contract_addressToaddress                 contract?          @relation("contract_addressToaddress")
  event_event_addressToaddress                       event[]            @relation("event_addressToaddress")
  log_log_addressToaddress                           log[]              @relation("log_addressToaddress")
  logged_address_logged_address_addressToaddress     logged_address[]   @relation("logged_address_addressToaddress")
  receipt_receipt_fromToaddress                      receipt[]          @relation("receipt_fromToaddress")
  receipt_receipt_toToaddress                        receipt[]          @relation("receipt_toToaddress")
  request_request_addressToaddress                   request[]          @relation("request_addressToaddress")
  token_address_token_address_addressToaddress       token_address[]    @relation("token_address_addressToaddress")
  transaction_transaction_fromToaddress              transaction[]      @relation("transaction_fromToaddress")
  transaction_transaction_toToaddress                transaction[]      @relation("transaction_toToaddress")
}

model address_in_event {
  id                                        Int
  address                                   String  @db.VarChar(42)
  address_address_in_event_addressToaddress address @relation("address_in_event_addressToaddress", fields: [address], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_address_in_event_address")
  event                                     event   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_address_in_event_id")

  @@id([id, address], map: "pk_address_in_event")
}

model balance {
  id                                Int     @id @default(autoincrement())
  address                           String  @db.VarChar(42)
  balance                           String  @db.VarChar
  blockNumber                       Int     @map("block_number")
  blockHash                         String  @map("block_hash") @db.VarChar(66)
  timestamp                         String  @db.VarChar
  created                           String  @db.VarChar
  address_balance_addressToaddress  address @relation("balance_addressToaddress", fields: [address], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_balance_address")
  block_balance_block_hashToblock   block   @relation("balance_block_hashToblock", fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_balance_block_hash")
  block_balance_block_numberToblock block   @relation("balance_block_numberToblock", fields: [blockNumber], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_balance_block_number")
}

model balances_log {
  blockHash String @map("block_hash") @db.VarChar(66)
  created   String @db.VarChar

  @@id([blockHash, created], map: "pk_balanceslog")
}

model block {
  id                                                            String?                @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  number                                                        Int                    @id
  hash                                                          String?                @unique @db.VarChar(66)
  miner                                                         String                 @db.VarChar(42)
  parentHash                                                    String                 @map("parent_hash") @db.VarChar(66)
  sha3Uncles                                                    String                 @map("sha3_uncles") @db.VarChar(66)
  logsBloom                                                     String                 @map("logs_bloom") @db.VarChar
  transactionsRoot                                              String                 @map("transactions_root") @db.VarChar(66)
  stateRoot                                                     String                 @map("state_root") @db.VarChar(66)
  receiptsRoot                                                  String                 @map("receipts_root") @db.VarChar(66)
  difficulty                                                    String                 @db.VarChar
  totalDifficulty                                               String                 @map("total_difficulty") @db.VarChar
  extraData                                                     String                 @map("extra_data") @db.VarChar
  size                                                          Int
  gasLimit                                                      Int                    @map("gas_limit")
  gasUsed                                                       Int                    @map("gas_used")
  timestamp                                                     String                 @db.VarChar
  minimumGasPrice                                               String                 @map("minimum_gas_price") @db.VarChar
  bitcoinMergedMiningHeader                                     String                 @map("bitcoin_merged_mining_header") @db.VarChar
  bitcoinMergedMiningCoinbaseTransaction                        String                 @map("bitcoin_merged_mining_coinbase_transaction") @db.VarChar
  bitcoinMergedMiningMerkleProof                                String                 @map("bitcoin_merged_mining_merkle_proof") @db.VarChar
  hashForMergedMining                                           String                 @map("hash_for_merged_mining") @db.VarChar(66)
  paidFees                                                      String                 @map("paid_fees") @db.VarChar
  cumulativeDifficulty                                          String                 @map("cumulative_difficulty") @db.VarChar
  received                                                      String                 @db.VarChar
  address_address_blockToblock                                  address[]              @relation("address_blockToblock")
  address_address_last_block_minedToblock                       address[]              @relation("address_last_block_minedToblock")
  balance_balance_block_hashToblock                             balance[]              @relation("balance_block_hashToblock")
  balance_balance_block_numberToblock                           balance[]              @relation("balance_block_numberToblock")
  contract                                                      contract[]
  event_event_block_hashToblock                                 event[]                @relation("event_block_hashToblock")
  event_event_block_numberToblock                               event[]                @relation("event_block_numberToblock")
  internal_transaction_internal_transaction_block_hashToblock   internal_transaction[] @relation("internal_transaction_block_hashToblock")
  internal_transaction_internal_transaction_block_numberToblock internal_transaction[] @relation("internal_transaction_block_numberToblock")
  log_log_block_hashToblock                                     log[]                  @relation("log_block_hashToblock")
  log_log_block_numberToblock                                   log[]                  @relation("log_block_numberToblock")
  receipt_receipt_block_hashToblock                             receipt[]              @relation("receipt_block_hashToblock")
  receipt_receipt_block_numberToblock                           receipt[]              @relation("receipt_block_numberToblock")
  stats_collection_stats_collection_block_hashToblock           stats_collection[]     @relation("stats_collection_block_hashToblock")
  stats_collection_stats_collection_block_numberToblock         stats_collection[]     @relation("stats_collection_block_numberToblock")
  token_address                                                 token_address[]
  transaction_transaction_block_hashToblock                     transaction[]          @relation("transaction_block_hashToblock")
  transaction_transaction_block_numberToblock                   transaction[]          @relation("transaction_block_numberToblock")
  txpool                                                        txpool[]
  uncle                                                         uncle[]
}

model bridge {
  id               Int                @id @default(autoincrement())
  lockingCap       String             @map("locking_cap") @db.VarChar
  stats_collection stats_collection[]
}

model circulating {
  id                Int                @id @default(autoincrement())
  circulatingSupply String             @map("circulating_supply") @db.VarChar
  totalSupply       Int                @map("total_supply")
  bridgeBalance     String             @map("bridge_balance") @db.VarChar
  stats_collection  stats_collection[]
}

model compiler {
  id            Int             @id(map: "pk_compiler") @default(autoincrement())
  key           String?         @db.VarChar
  value         String?         @db.VarChar
  used_settings used_settings[]

  @@unique([key, value], map: "unique_compiler")
}

model config {
  id              String            @id @db.VarChar
  netId           String            @map("net_id") @db.VarChar
  hash            String            @db.VarChar
  updated         String            @db.VarChar
  net             net               @relation(fields: [netId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_config_net_id")
  native_contract native_contract[]
}

model contract {
  address                                        String                @id @db.VarChar(42)
  name                                           String                @db.VarChar
  createdByTx                                    String                @map("created_by_tx") @db.VarChar(66)
  code                                           String                @db.VarChar
  codeStoredAtblock                              Int                   @map("code_stored_at_block")
  deployedCode                                   String                @map("deployed_code") @db.VarChar
  symbol                                         String                @db.VarChar
  totalSupply                                    String                @map("total_supply") @db.VarChar
  address_contract_addressToaddress              address               @relation("contract_addressToaddress", fields: [address], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_address")
  block                                          block                 @relation(fields: [codeStoredAtblock], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_code_stored_at_block")
  transaction                                    transaction           @relation(fields: [createdByTx], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_created_by_tx")
  contract_interface                             contract_interface[]
  contract_method                                contract_method[]
  token_address_token_address_contractTocontract token_address[]       @relation("token_address_contractTocontract")
  verification_result                            verification_result[]
}

model contract_interface {
  id              Int        @id @default(autoincrement())
  interfaceId     Int        @map("interface_id")
  contractAddress String     @map("contract_address") @db.VarChar(42)
  contract        contract   @relation(fields: [contractAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_interface_contract_address")
  interface_      interface_ @relation(fields: [interfaceId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_interface_interface_id")
}

model contract_method {
  id              Int      @id @default(autoincrement())
  methodId        Int      @map("method_id")
  contractAddress String   @map("contract_address") @db.VarChar(42)
  contract        contract @relation(fields: [contractAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_method_contract_address")
  method          method   @relation(fields: [methodId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_method_method_id")
}

model contract_verification {
  id                           Int                          @id(map: "pk_contract_verification") @default(autoincrement())
  address                      String?                      @db.VarChar(42)
  match                        Boolean
  requestId                    Int                          @map("request_id")
  resultId                     Int                          @map("result_id")
  abi                          Int
  contract_verification_abi    contract_verification_abi    @relation(fields: [abi], references: [abiId], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_verification_abi")
  request                      request                      @relation(fields: [requestId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_verification_request_id")
  contract_verification_result contract_verification_result @relation(fields: [resultId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_verification_result_id")
  source                       source[]
}

model contract_verification_abi {
  abiId                           Int                               @id @default(autoincrement()) @map("abi_id")
  constant                        Boolean?
  name                            String?                           @db.VarChar
  payable                         Boolean?
  satate_mutability               String?                           @db.VarChar
  type                            String?                           @db.VarChar
  contract_verification           contract_verification[]
  contract_verification_abi_input contract_verification_abi_input[]
  contract_verification_abioutput contract_verification_abioutput[]
  contract_verification_result    contract_verification_result[]
}

model contract_verification_abi_input {
  abiId                     Int                       @map("abi_id")
  name                      String                    @db.VarChar
  type                      String                    @db.VarChar
  satate_mutability         String?                   @db.VarChar
  internalType              String?                   @map("internal_type") @db.VarChar
  contract_verification_abi contract_verification_abi @relation(fields: [abiId], references: [abiId], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_verification_abi_input")

  @@id([abiId, name, type], map: "pk_contract_verification_abi_input")
}

model contract_verification_abioutput {
  abiId                     Int                       @map("abi_id")
  name                      String                    @db.VarChar
  type                      String                    @db.VarChar
  internalType              String?                   @map("internal_type") @db.VarChar
  contract_verification_abi contract_verification_abi @relation(fields: [abiId], references: [abiId], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_verification_abioutput")

  @@id([abiId, name, type], map: "pk_contract_verification_abiouput")
}

model contract_verification_result {
  id                          Int                          @id @default(autoincrement())
  name                        String                       @db.VarChar
  usedSettingsId              Int                          @map("used_settings_id")
  bytecode                    String                       @db.VarChar
  resultBytecode              String                       @map("result_bytecode") @db.VarChar
  bytecodehash                String                       @db.VarChar
  resultBytecodeHash          String                       @map("result_bytecode_hash") @db.VarChar
  abi                         Int
  opcodes                     String?                      @db.VarChar
  encodedConstructorArguments String                       @map("encoded_constructor_arguments") @db.VarChar
  contract_verification       contract_verification[]
  contract_verification_abi   contract_verification_abi    @relation(fields: [abi], references: [abiId], onDelete: NoAction, onUpdate: NoAction, map: "fk_contr_vctverificat_ronresult_abi")
  used_settings               used_settings                @relation(fields: [usedSettingsId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_contr_vctverificat_ronresult_used_settings_id")
  decoded_metadata            decoded_metadata[]
  method_identifier           method_identifier[]
  result_constructor_argument result_constructor_argument?
  result_used_library         result_used_library[]
  result_warning              result_warning[]
  used_source                 used_source[]
}

model decoded_metadata {
  resultId                     Int                          @map("result_id")
  key                          String                       @db.VarChar
  value                        String                       @db.VarChar
  contract_verification_result contract_verification_result @relation(fields: [resultId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_decoded_metadata_result_id")

  @@id([resultId, key, value], map: "pk_decoded_metadata")
}

model event {
  id                              Int                @id @default(autoincrement())
  eventId                         String?            @map("event_id") @db.VarChar
  abiId                           Int                @map("abi_id")
  transactionHash                 String             @map("transaction_hash") @db.VarChar(66)
  address                         String             @db.VarChar(42)
  blockHash                       String             @map("block_hash") @db.VarChar(66)
  blockNumber                     Int                @map("block_number")
  data                            String             @db.VarChar
  event                           String             @db.VarChar
  logIndex                        Int                @map("log_index")
  signature                       String             @db.VarChar
  timestamp                       String             @db.VarChar
  transactionIndex                Int                @map("transaction_index")
  txStatus                        String             @map("tx_status") @db.VarChar
  address_in_event                address_in_event[]
  abi                             abi                @relation(fields: [abiId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_abi_id")
  address_event_addressToaddress  address            @relation("event_addressToaddress", fields: [address], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_address")
  block_event_block_hashToblock   block              @relation("event_block_hashToblock", fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_block_hash")
  block_event_block_numberToblock block              @relation("event_block_numberToblock", fields: [blockNumber], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_block_number")
  transaction                     transaction        @relation(fields: [transactionHash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_transaction_hash")
  event_arg                       event_arg[]
  event_topic                     event_topic[]
}

model event_arg {
  id    Int
  arg   String @db.VarChar
  event event  @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_arg_id")

  @@id([id, arg], map: "pk_event_arg")
}

model event_topic {
  id    Int
  topic String @db.VarChar
  event event  @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_topic_id")

  @@id([id, topic], map: "pk_event_topic")
}

/// This model has been renamed to 'import_' during introspection, because the original name 'import' is reserved.
/// This model has been renamed to 'import_' during introspection, because the original name 'import' is reserved.
model import_ {
  requestId Int     @map("request_id")
  name      String  @db.VarChar
  contents  String  @db.VarChar
  file      String  @db.VarChar
  request   request @relation(fields: [requestId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_import_request_id")

  @@id([requestId, name], map: "pk_import")
  @@map("import")
}

model input {
  name      String      @db.VarChar
  type      String      @db.VarChar
  indexed   Boolean?
  abi_input abi_input[]

  @@id([name, type], map: "pk_input")
}

/// This model has been renamed to 'interface_' during introspection, because the original name 'interface' is reserved.
/// This model has been renamed to 'interface_' during introspection, because the original name 'interface' is reserved.
model interface_ {
  id                 Int                  @id @default(autoincrement())
  interface          String               @db.VarChar
  contract_interface contract_interface[]

  @@map("interface")
}

model internal_transaction {
  internalTxId                                   String                       @id @map("internal_tx_id") @db.VarChar
  transactionHash                                String                       @map("transaction_hash") @db.VarChar(66)
  blockNumber                                    Int                          @map("block_number")
  blockHash                                      String                       @map("block_hash") @db.VarChar(66)
  actionId                                       Int                          @map("action_id")
  transactionPosition                            Int                          @map("transaction_position")
  subtraces                                      Int
  index                                          Int
  timestamp                                      String                       @db.VarChar
  action                                         action                       @relation(fields: [actionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_internal_transaction_action_id")
  block_internal_transaction_block_hashToblock   block                        @relation("internal_transaction_block_hashToblock", fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_internal_transaction_block_hash")
  block_internal_transaction_block_numberToblock block                        @relation("internal_transaction_block_numberToblock", fields: [blockNumber], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_internal_transaction_block_number")
  transaction                                    transaction                  @relation(fields: [transactionHash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_internal_transaction_transaction_hash")
  internal_transaction_result                    internal_transaction_result?
  trace_address                                  trace_address[]
}

model internal_transaction_result {
  internalTxId         String               @id @map("internal_tx_id") @db.VarChar
  gasUsed              String               @map("gas_used") @db.VarChar
  output               String               @db.VarChar
  internal_transaction internal_transaction @relation(fields: [internalTxId], references: [internalTxId], onDelete: NoAction, onUpdate: NoAction, map: "fk_result_internal_tx_id")
}

model library {
  address               String                  @id @db.VarChar(42)
  name                  String?                 @db.VarChar
  request_library       request_library[]
  result_used_library   result_used_library[]
  used_settings_library used_settings_library[]
}

model log {
  logIndex                      Int              @map("log_index")
  transactionHash               String           @map("transaction_hash") @db.VarChar(66)
  transactionIndex              Int              @map("transaction_index")
  blockNumber                   Int              @map("block_number")
  blockHash                     String           @map("block_hash") @db.VarChar(66)
  address                       String           @db.VarChar(42)
  abi                           Int?
  data                          String?          @db.VarChar
  signture                      String?          @db.VarChar
  event                         String?          @db.VarChar
  timestamp                     String?          @db.VarChar
  txStatus                      String?          @map("tx_status") @db.VarChar
  event_id                      String?          @db.VarChar
  abi_log_abiToabi              abi?             @relation("log_abiToabi", fields: [abi], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_log_abi")
  address_log_addressToaddress  address          @relation("log_addressToaddress", fields: [address], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_log_address")
  block_log_block_hashToblock   block            @relation("log_block_hashToblock", fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_log_block_hash")
  block_log_block_numberToblock block            @relation("log_block_numberToblock", fields: [blockNumber], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_log_block_number")
  transaction                   receipt          @relation(fields: [transactionHash], references: [transactionHash], onDelete: NoAction, onUpdate: NoAction, map: "fk_log_transaction_hash")
  log_arg                       log_arg[]
  log_topic                     log_topic[]
  logged_address                logged_address[]

  @@id([logIndex, transactionHash], map: "pk_log")
}

model log_arg {
  logIndex        Int    @map("log_index")
  arg             String @db.VarChar
  transactionHash String @map("transaction_hash") @db.VarChar
  log             log    @relation(fields: [logIndex, transactionHash], references: [logIndex, transactionHash], onDelete: NoAction, onUpdate: NoAction, map: "fk_log_arg_log_index_transaction_hash")

  @@id([logIndex, arg, transactionHash], map: "pk_log_arg")
}

model log_topic {
  logIndex        Int    @map("log_index")
  topic           String @db.VarChar
  transactionHash String @map("transaction_hash") @db.VarChar
  log             log    @relation(fields: [logIndex, transactionHash], references: [logIndex, transactionHash], onDelete: NoAction, onUpdate: NoAction, map: "fk_log_topic_log_index_transaction_hash")

  @@id([logIndex, topic, transactionHash], map: "pk_log_topic")
}

model logged_address {
  logIndex                                Int     @map("log_index")
  address                                 String  @db.VarChar(42)
  transactionHash                         String  @map("transaction_hash") @db.VarChar
  address_logged_address_addressToaddress address @relation("logged_address_addressToaddress", fields: [address], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_logged_address_address")
  log                                     log     @relation(fields: [logIndex, transactionHash], references: [logIndex, transactionHash], onDelete: NoAction, onUpdate: NoAction, map: "fk_logged_address_log_index_transaction_hash")

  @@id([logIndex, address, transactionHash], map: "pk_logged_address")
}

model method {
  id              Int               @id @default(autoincrement())
  method          String            @db.VarChar
  contract_method contract_method[]
}

model method_identifier {
  resultId                     Int                          @map("result_id")
  identifier                   String                       @db.VarChar
  method                       String?                      @db.VarChar
  contract_verification_result contract_verification_result @relation(fields: [resultId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_method_identifier_result_id")

  @@id([resultId, identifier], map: "pk_method_identifier")
}

model net {
  id     String   @id @db.VarChar
  name   String   @db.VarChar
  config config[]
}

model optimizer {
  id            Int             @id @default(autoincrement())
  enabled       Boolean
  runs          Int
  settings      settings[]
  used_settings used_settings[]
}

model receipt {
  transactionHash                   String      @id @map("transaction_hash") @db.VarChar(66)
  transactionIndex                  Int         @map("transaction_index")
  blockHash                         String      @map("block_hash") @db.VarChar(66)
  blockNumber                       Int         @map("block_number")
  from                              String      @db.VarChar(42)
  to                                String      @db.VarChar(42)
  cumulativeGasUsed                 Int         @map("cumulative_gas_used")
  gasUsed                           Int         @map("gas_used")
  contractAddress                   String?     @map("contract_address") @db.VarChar(42)
  status                            String      @db.VarChar
  logsBloom                         String      @map("logs_bloom") @db.VarChar
  log                               log[]
  block_receipt_block_hashToblock   block       @relation("receipt_block_hashToblock", fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_receipt_block_hash")
  block_receipt_block_numberToblock block       @relation("receipt_block_numberToblock", fields: [blockNumber], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_receipt_block_number")
  address_receipt_fromToaddress     address     @relation("receipt_fromToaddress", fields: [from], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_receipt_from")
  address_receipt_toToaddress       address     @relation("receipt_toToaddress", fields: [to], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_receipt_to")
  transaction                       transaction @relation(fields: [transactionHash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_receipt_transaction_hash")
}

model remapping {
  usedSettingsId Int     @id @map("used_settings_id")
  old            String? @db.VarChar(42)
  new            String? @db.VarChar(42)
}

model request {
  id                               Int                           @id @default(autoincrement())
  address                          String?                       @db.VarChar(42)
  settingsId                       Int                           @map("settings_id")
  version                          String                        @db.VarChar
  name                             String                        @db.VarChar
  source                           String                        @db.VarChar
  bytecode                         String                        @db.VarChar
  contract_verification            contract_verification[]
  import_                          import_[]
  address_request_addressToaddress address?                      @relation("request_addressToaddress", fields: [address], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_address")
  settings                         settings                      @relation(fields: [settingsId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_settings_id")
  request_constructor_argument     request_constructor_argument?
  request_library                  request_library[]
}

model request_constructor_argument {
  requestId Int     @id @map("request_id")
  position  Int     @db.SmallInt
  value     String  @db.VarChar
  request   request @relation(fields: [requestId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_constructor_argument_request_id")
}

model request_library {
  requestId      Int     @map("request_id")
  libraryAddress String  @map("library_address") @db.VarChar(42)
  library        library @relation(fields: [libraryAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_library_library_address")
  request        request @relation(fields: [requestId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_library_request_id")

  @@id([requestId, libraryAddress], map: "pk_request_library")
}

model result_constructor_argument {
  resultId                     Int                          @id @map("result_id")
  position                     Int?                         @db.SmallInt
  value                        String?                      @db.VarChar
  contract_verification_result contract_verification_result @relation(fields: [resultId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_result_constructor_argument_result_id")
}

model result_used_library {
  resultId                     Int                          @map("result_id")
  libraryAddress               String                       @map("library_address") @db.VarChar(42)
  library                      library                      @relation(fields: [libraryAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_result_used_library_library_address")
  contract_verification_result contract_verification_result @relation(fields: [resultId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_result_used_library_result_id")

  @@id([resultId, libraryAddress], map: "pk_result_used_library")
}

model result_warning {
  resultId                     Int                          @map("result_id")
  warningId                    Int                          @map("warning_id")
  contract_verification_result contract_verification_result @relation(fields: [resultId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_result_warning_result_id")
  warning                      warning                      @relation(fields: [warningId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_result_warning_warning_id")

  @@id([resultId, warningId], map: "pk_result_warning")
}

model settings {
  id          Int       @id @default(autoincrement())
  evmVersion  String    @map("evm_version") @db.VarChar
  optimizerId Int       @map("optimizer_id")
  request     request[]
  optimizer   optimizer @relation(fields: [optimizerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_settings_optimizer_id")
}

model source {
  verificationId        Int                   @map("verification_id")
  name                  String                @db.VarChar
  contents              String                @db.VarChar
  contract_verification contract_verification @relation(fields: [verificationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_source_verification_id")

  @@id([verificationId, name, contents], map: "pk_source")
}

model source_location {
  id                                               Int       @id @default(autoincrement())
  end                                              Int
  file                                             String    @db.VarChar
  start                                            Int
  warning_warning_source_locationTosource_location warning[] @relation("warning_source_locationTosource_location")
}

model stats_collection {
  id                                         Int         @id @default(autoincrement())
  blockNumber                                Int         @map("block_number")
  blockHash                                  String      @map("block_hash") @db.VarChar
  circulatingId                              Int         @map("circulating_id")
  bridgeId                                   Int         @map("bridge_id")
  activeAccounts                             Int         @map("active_accounts")
  hashrate                                   String      @db.VarChar
  timestamp                                  String      @db.VarChar
  block_stats_collection_block_hashToblock   block       @relation("stats_collection_block_hashToblock", fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_stats_collection_block_hash")
  block_stats_collection_block_numberToblock block       @relation("stats_collection_block_numberToblock", fields: [blockNumber], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_stats_collection_block_number")
  bridge                                     bridge      @relation(fields: [bridgeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stats_collection_bridge_id")
  circulating                                circulating @relation(fields: [circulatingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stats_collection_circulating_id")
}

model status {
  timestamp        Int     @id @default(autoincrement())
  pendingBlocks    Int     @map("pending_blocks")
  requestingBlocks Int     @map("requesting_blocks")
  nodeDown         Boolean @map("node_down")
}

model token_address {
  id                                        Int      @id @default(autoincrement())
  address                                   String   @db.VarChar(42)
  contract                                  String   @db.VarChar(42)
  blockNumber                               Int      @map("block_number")
  balance                                   String   @db.VarChar
  address_token_address_addressToaddress    address  @relation("token_address_addressToaddress", fields: [address], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_token_address_address")
  block                                     block    @relation(fields: [blockNumber], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_token_address_block_number")
  contract_token_address_contractTocontract contract @relation("token_address_contractTocontract", fields: [contract], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_token_address_contract")
}

model trace_address {
  internalTxId         String               @map("internal_tx_id") @db.VarChar
  operation            Int
  internal_transaction internal_transaction @relation(fields: [internalTxId], references: [internalTxId], onDelete: NoAction, onUpdate: NoAction, map: "fk_trace_address_internal_tx_id")

  @@id([internalTxId, operation], map: "pk_trace_address")
}

model transaction {
  hash                                  String                 @id @db.VarChar(66)
  txId                                  String                 @map("tx_id") @db.VarChar
  txTypeId                              Int                    @map("tx_type_id")
  from                                  String                 @db.VarChar(42)
  to                                    String                 @db.VarChar(42)
  blockNumber                           Int                    @map("block_number")
  blockHash                             String                 @map("block_hash") @db.VarChar(66)
  transactionIndex                      Int                    @map("transaction_index")
  nonce                                 Int
  gas                                   Int
  gasPrice                              String                 @map("gas_price") @db.VarChar
  value                                 String                 @db.VarChar
  input                                 String?                @db.VarChar
  v                                     String?                @db.VarChar
  r                                     String?                @db.VarChar
  s                                     String?                @db.VarChar
  timestamp                             String                 @db.VarChar
  contract                              contract[]
  event                                 event[]
  internal_transaction                  internal_transaction[]
  receipt                               receipt?
  block_transaction_block_hashToblock   block                  @relation("transaction_block_hashToblock", fields: [blockHash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_block_hash")
  block_transaction_block_numberToblock block                  @relation("transaction_block_numberToblock", fields: [blockNumber], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_block_number")
  address_transaction_fromToaddress     address                @relation("transaction_fromToaddress", fields: [from], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_from")
  address_transaction_toToaddress       address                @relation("transaction_toToaddress", fields: [to], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_to")
  type                                  type                   @relation(fields: [txTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_tx_type_id")
}

model transaction_in_pool {
  transactionHash     String              @map("transaction_hash") @db.VarChar(66)
  poolId              Int                 @map("pool_id")
  txpool              txpool              @relation(fields: [poolId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_in_pool_pool_id")
  transaction_pending transaction_pending @relation(fields: [transactionHash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_in_pool_transaction_hash")

  @@id([transactionHash, poolId], map: "pk_transaction_in_pool")
}

model transaction_pending {
  hash                String                @id @db.VarChar(66)
  blockHash           String                @map("block_hash") @db.VarChar(66)
  from                String                @db.VarChar(42)
  to                  String                @db.VarChar(42)
  blockNumber         Int                   @map("block_number")
  transactionIndex    Int                   @map("transaction_index")
  nonce               Int
  gas                 Int
  gasPrice            String                @map("gas_price") @db.VarChar
  value               String                @db.VarChar
  input               String                @db.VarChar
  status              String                @db.VarChar
  transaction_in_pool transaction_in_pool[]
}

model txpool {
  id                  Int                   @id @default(autoincrement())
  blockNumber         Int                   @map("block_number")
  pending             Int
  queued              Int
  timestamp           String                @db.VarChar
  transaction_in_pool transaction_in_pool[]
  block               block                 @relation(fields: [blockNumber], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_txpool_block_number")
}

model type {
  id          Int           @id @default(autoincrement())
  entity      String        @db.VarChar
  type        String        @db.VarChar
  transaction transaction[]
}

model uncle {
  hash        String @id @db.VarChar(66)
  blockNumber Int    @map("block_number")
  block       block  @relation(fields: [blockNumber], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_uncle_block_number")
}

model used_settings {
  id                           Int                            @id @default(autoincrement())
  compilerId                   Int?                           @map("compiler_id")
  language                     String?                        @db.VarChar
  evmVersion                   String?                        @map("evm_version") @db.VarChar
  optimizerId                  Int?                           @map("optimizer_id")
  contract_verification_result contract_verification_result[]
  compiler                     compiler?                      @relation(fields: [compilerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_used_settings_compiler_id")
  optimizer                    optimizer?                     @relation(fields: [optimizerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_used_settings_optimizer_id")
  used_settings_library        used_settings_library[]
}

model used_settings_library {
  usedSettingsId Int           @map("used_settings_id")
  libraryAddress String        @map("library_address") @db.VarChar(42)
  library        library       @relation(fields: [libraryAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_used_settings_library_library_address")
  used_settings  used_settings @relation(fields: [usedSettingsId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_used_settings_library_used_settings_id")

  @@id([usedSettingsId, libraryAddress], map: "pk_used_settings_library")
}

model used_source {
  resultId                     Int                          @map("result_id")
  name                         String                       @db.VarChar
  contents                     String                       @db.VarChar
  file                         String                       @db.VarChar
  contract_verification_result contract_verification_result @relation(fields: [resultId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_used_source_result_id")

  @@id([resultId, name], map: "pk_used_source")
}

model verification_result {
  id       String    @id @db.VarChar
  address  String?   @db.VarChar(42)
  contract contract? @relation(fields: [address], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "fk_verification_result_address")
}

model warning {
  id                                                       Int              @id @default(autoincrement())
  component                                                String?          @db.VarChar
  formattedMessage                                         String?          @map("formatted_message") @db.VarChar
  message                                                  String?          @db.VarChar
  severity                                                 String?          @db.VarChar
  type                                                     String?          @db.VarChar
  sourceLocation                                           Int?             @map("source_location")
  result_warning                                           result_warning[]
  source_location_warning_source_locationTosource_location source_location? @relation("warning_source_locationTosource_location", fields: [sourceLocation], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_warning_source_location")
}

model native_contract {
  configId String @map("config_id") @db.VarChar
  name     String @db.VarChar
  address  String @db.VarChar(42)
  config   config @relation(fields: [configId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_native_contract_config_id")

  @@id([configId, name], map: "pk_native_contract")
}
